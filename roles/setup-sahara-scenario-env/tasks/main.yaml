- block:
    - name: set sahara_image_path based on the remote file
      set_fact:
        sahara_image_path: "{{ ansible_user_dir }}/{{ sahara_image_name }}.{{ sahara_image_format }}"
    - name: download the remote image
      get_url:
        url: "{{ sahara_image_url }}"
        dest: "{{ sahara_image_path }}"
  when: sahara_image_url is defined and sahara_image_url!='' and sahara_image_url is search('^http')

- name: set sahara_image_path from the local file
  set_fact:
    sahara_image_path: "{{ sahara_image_url }}"
  when: sahara_image_url is defined and sahara_image_url!='' and not sahara_image_url is search('^http')

# we cannot use os_image because Ansible 2.7 requires a newer version of
# openstacksdk than the one available in queens and pike.
- name: register the required image in Glance
  command: |
    openstack --os-cloud {{ sahara_cloud_demo }} image create \
        --disk-format {{ sahara_image_format }} --file {{ sahara_image_path }} \
        {{ sahara_image_name }}

- name: register the required image in Sahara
  shell: |
    openstack --os-cloud {{ sahara_cloud_demo }} dataprocessing image register \
        --username {{ sahara_image_user }} {{ sahara_image_name }};
    openstack --os-cloud {{ sahara_cloud_demo }}  dataprocessing image tags add {{ sahara_image_name }} --tags \
        {{ sahara_plugin_version }} {{ sahara_plugin }}

- name: S3 configuration
  import_tasks: setup_s3.yaml
  when: sahara_enable_s3

# we cannot use os_nova_flavor as well (see above)
- name: create the required flavor(s)
  command: |
    openstack --os-cloud {{ sahara_cloud_demo }} flavor create \
        --ram {{ item.value.ram }} \
        --vcpus {{ item.value.vcpus|default('1') }} \
        --disk {{ item.value.disk|default('10') }} \
        {% if item.value.ephemeral|default(0) -%}
        --ephemeral {{ item.value.ephemeral }} \
        {% endif -%} \
        {{ item.key }}
  with_dict: "{{ sahara_flavors }}"
  ignore_errors: true

- name: generate the configuration file for the scenario test
  template:
    src: sahara_scenario_conf.ini.j2
    dest: "{{ sahara_scenario_conf }}"
